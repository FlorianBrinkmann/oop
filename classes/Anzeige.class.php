<?php/** * Class Anzeige * * Kümmert sich um die verschiedenen Ausgaben im Frontend (auch für den Nutzer unsichtbares JS) */class Anzeige {	/**	 * Erstellt für die Karosserie ($karosserien ist nur eine Karosserie) pro Karosserie-Wert	 * ( foreach ( $karosserie as $key => $value ) ) einen Listenpunkt	 *	 * @param $karosserien	 */	function detailView( $karosserien ) {		if ( empty( $karosserien ) ) {			return;		}		foreach ( $karosserien as $karosserie ) {			echo "<ul>";			foreach ( $karosserie as $key => $value ) {				echo "<li>" . $key . ": " . $value . "</li>";			}			echo "</ul>";		}	}	/**	 * Gibt für jede Karosserie ( foreach ( $karosserien as $karosserie ) ) ein Formular zurück.	 * $inputArgs wird für jeden Einzelwert einer Karosserie erweitert (sieht dann aus wie in der index.php)	 *	 * @param $karosserien	 */	function overview( $karosserien ) {		if ( empty( $karosserien ) ) {			return;		}		foreach ( $karosserien as $karosserie ) {			$inputArgs = [ ];			foreach ( $karosserie as $key => $value ) {				$inputArgs[] = [					'label'       => $value,					'id'          => $key,					'type'        => 'hidden',					'placeholder' => '',					'value'       => $value,				];			}			$formular = new Formular();			$formular->form( 'post', 'details.php', $inputArgs, 'Details' );		}	}	/**	 * Erzeugt aus dem Karosserie-Array zuerst ein PHP-Array, das die Spalten in jeweils ein Unter-Array gruppiert	 * und anschließend zu JSON-Strings umgewandelt wird	 *	 * @param $karosserien	 */	function json( $karosserien ) {		$jsonArray         = [ ];		foreach ( $karosserien as $karosserie ) {			foreach ( $karosserie as $key => $value ) {				if ( ! array_key_exists( $key, $jsonArray ) ) {					$jsonArray[ $key ] = '';				}				$jsonArray[ $key ][] .= htmlentities( "$value" );			}		}		foreach ( $jsonArray as $key => $value ) {			$jsonString = html_entity_decode( json_encode( $value ) );			echo $key . "_local = " . $jsonString . ";\n";		}	}	/**	 * Erzeugt den notwendigen Typeahead-JavaScript-Code. Übergeben werden die gesuchten Werte und für jedes davon	 * wird ein JS-Block erstellt	 * Bei dem Argument „local“ werden die JSON-Strings angesprochen, die oben in der Methode JSON erzeugt wurden	 *	 * @param $wantedValues	 */	function typeahead( $wantedValues ) {		foreach ( $wantedValues as $wantedValue ) { ?>			<?php echo $wantedValue; ?> = new Bloodhound({			local: <?php echo $wantedValue . '_local'; ?>,			datumTokenizer: Bloodhound.tokenizers.whitespace,			queryTokenizer: Bloodhound.tokenizers.whitespace,			});			$('.<?php echo $wantedValue; ?>').typeahead(null,			{			name: '<?php echo $wantedValue; ?>',			source: <?php echo $wantedValue; ?>			});		<?php		}	}	/**	 * Aktualisiert die JSON-Strings anhand der übergebenen Karosserien und lässt Typeahead anschließend die Quelle	 * aktualisieren	 *	 * @param $karosserien, $wantedValuesJson	 */	function typeaheadUpdate( $karosserien, $wantedValuesJson ) { ?>		<script>			<?php $json = $this->json($karosserien);			echo $json;			foreach ( $wantedValuesJson as $wantedValue ) { ?>				<?php echo $wantedValue; ?>.clear();				<?php echo $wantedValue; ?>.local = <?php echo $wantedValue; ?>_local;				<?php echo $wantedValue; ?>.initialize(true);			<?php } ?>		</script>	<?php	}}